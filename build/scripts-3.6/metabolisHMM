#!/Users/emcdaniel/anaconda3/bin/python3

__author__="Elizabeth McDaniel"
__license__="GPL"
__email__="elizabethmcd93@gmail.com"

import argparse 
import os
import sys

import metabolisHMM

def version():
    versionFile = open(os.path.join(metabolisHMM.__path__[0], 'VERSION'))
    return versionFile.read().strip()

VERSION = version()

if sys.version_info[0] < 3:
    print("You are running metabolisHMM with python2 - you need python3.")
    sys.exit(1)

class SmartFormatter(argparse.ArgumentDefaultsHelpFormatter):
    def _split_lines(self, text, width):
        if text.startswith('R|'):
            return text[2:].splitlines()
        # this is the RawTextHelpFormatter._split_lines
        return argparse.HelpFormatter._split_lines(self, text, width)

# Top level help menu

def printHelp():
    print('')
    print('         metabolisHMM v' + VERSION + '    ')
    print('''\

  Elizabeth McDaniel. GPL 3.0 License. McMahon Lab, UW-Madison. 2020
  
  Choose one of the workflows below for more detailed help. See https://github.com/elizabethmcd/metabolisHMM/wiki for documentation

  Workflows:
        create-phylogeny            -> Create genome phylogeny of curated ribosomal protein markers
        single-marker               -> Create a phylogeny of a single marker
        summarize-metabolism        -> Summarize metabolic capabilities with curated markers
        custom-search               -> Search for custom sets of markers among genomes

  Usage: metabolisHMM <command> -h for workflow specific help

  Example: metabolisHMM custom-search -h 

  ** Genome names can only contain underscores "_" and not hypens "-" **

    ''')

if __name__ == '__main__':
    parser = argparse.ArgumentParser('metabolisHMM', add_help=False, formatter_class = argparse.ArgumentDefaultsHelpFormatter)
    subparsers = parser.add_subparsers(dest='subparser_name')

    # genome phylogeny marker arguments
    create_phylogeny_parser = subparsers.add_parser("create-phylogeny", description="Create a genome phylogeny with curated ribosomal protein markers.")
    create_phylogeny_parser._action_groups.pop()
    required = create_phylogeny_parser.add_argument_group("Required Arguments")
    metadata = create_phylogeny_parser.add_argument_group("Metadata Arguments")
    other = create_phylogeny_parser.add_argument_group("Other Arguments")
    required.add_argument("-i","--input", help="Directory where genomes to be screened are held", default=False)
    required.add_argument("-o","--output", help="Directory to store results and intermediate files", default=False)
    required.add_argument("-dom","--domain", help="Options: Archaea or Bacteria (each requires separate curated markers and thus must be constructed separately).", default=False)
    required.add_argument("-phy","--phylogeny", help="Options: fastree or raxml", default=False)
    other.add_argument("-p","--threads", help="Number of threads used to search for markers and calculate tree using RaxML. Default = 2", default=2)
    metadata.add_argument("-names", "--names", help="CSV formatted metadata files of filenames and corresponding taxonomical or group names.", default=False)
    metadata.add_argument("-itol", "--itol", help="Output ITOL formatted metadata file for matching leaf labels to given taxonomical or group names.", default=False)
    
    # single marker phylogeny arguments
    single_marker_parser = subparsers.add_parser("single-marker", description="Create a phylogeny of a single HMM marker.")
    single_marker_parser._action_groups.pop()
    required = single_marker_parser.add_argument_group("Required Arguments")  
    metadata = single_marker_parser.add_argument_group("Metadata Arguments")
    ribo = single_marker_parser.add_argument_group("Corresponding Ribosomal Tree Arguments")
    other = single_marker_parser.add_argument_group("Other Arguments")
    required.add_argument("-i","--input", help="Directory where genomes to be screened are held", default=False)
    required.add_argument("-o","--output", help="Directory to store results and intermediate files", default=False)
    required.add_argument("-m","--marker", help="Location of single marker HMM file to run analysis on.", default=False)
    required.add_argument("-phy","--phylogeny", help="Options: fastree or raxml.", default=False)
    metadata.add_argument("-names","--names",help="CSV formatted metadata file of corresponding taxonomical or group names.", default=None)
    metadata.add_argument("-itol","--itol",help="Output iTOL formatted metadata file for changing leaf labels to taxonomical or group names.", default="itol-metadata.txt")
    ribo.add_argument("-ribo","--ribo",help="Make corresponding ribosomal phylogeny of genomes containing hits of the provided single marker HMM.")
    ribo.add_argument("-domain","--domain",help="Options: Archaea or Bacteria (each requires separate curated markers and thus must be constructed separately).", default=False)
    ribo.add_argument("-loci", "--loci", help="Output genome names with less than x number of loci. Default = 12", default=12)
    other.add_argument("-list", "--list", help="Output list of hits locus tags", default=False)
    other.add_argument("-kofam","--kofam",help="If using an HMM from KofamKOALA that does not include the TC within the HMM file, point to the location fo the ko_list file.", default=False)
    other.add_argument("-p", "--threads", help="Number of threads used to perform search and tree building with raxml. Default=2", default=2)

    # custom search arguments
    custom_search_parser = subparsers.add_parser("custom-search", description="Search genomes using custom sets of HMMs.")
    custom_search_parser._action_groups.pop()
    required = custom_search_parser.add_argument_group("Required Arguments")
    plotting = custom_search_parser.add_argument_group("Plotting Arguments")
    other = custom_search_parser.add_argument_group("Other Arguments")
    required.add_argument("-i","--input", help="Directory where genomes to be screened are held", default=False)
    required.add_argument("-o","--output", help="Directory to store results and intermediate files", default=False)
    required.add_argument("-markers","--markers_dir",help="Directory where custom markers are located.", default=False)
    required.add_argument("-marker_list","--markers_list",help="Ordered list of markers to run custom search on.", default=False)
    required.add_argument("-metadata", "--metadata", help="CSV formatted metadata file of corresponding taxonomical or group names associated with genome file names.", default=False)
    plotting.add_argument("-agg", "--aggregate", help="Aggregate metadata names by group. Options = ON or OFF. Default = OFF", default='OFF')
    plotting.add_argument("-order","--ordering",help="Control custom ordering of rows in heatmap. Options = ON or OFF. By default is OFF and lists groups or genome names in alphanumerical order.", default='OFF')
    plotting.add_argument("-list", "--order_list", help="TXT file of ordered groups in custom order instead of default alphanumerical ordering.", default=False)
    plotting.add_argument("-heatmap","--heatmap", help="Summary heatmap in PDF format. If you provide a custom name, it must end in .pdf.", default="custom-search.pdf")
    plotting.add_argument("-plot","--plotting", help="Option to turn plotting off and use raw outputs for custom visualization. Options = ON or OFF. By default is ON.", default='ON')
    other.add_argument("-summ", "--summary", help="Output raw stats of marker searchs in CSV file.", default=False)
    other.add_argument("-kofam","--kofam", help="IF using HMMs from KofamKOALA that do not include the TC within the HMM file, point to the location of the ko_list file.", default=False)
    other.add_argument("-p", "--threads", help="Number of threads used to perform searches. Default=2", default=2)

    # summarize arguments
    summarize_parser = subparsers.add_parser("summarize-metabolism", description="Create a summary of curated metabolic markers spanning biogeochemical cycles.")
    summarize_parser._action_groups.pop()
    required = summarize_parser.add_argument_group("Required Arguments")
    plotting = summarize_parser.add_argument_group("Plotting Arguments")
    other = summarize_parser.add_argument_group("Other Arguments")
    required.add_argument("-i","--input", help="Directory where genomes to be screened are held", default=False)
    required.add_argument("-o","--output", help="Directory to store results and intermediate files", default=False)
    required.add_argument("-metadata", "--metadata", help="CSV formatted metadata file of corresponding taxonomical or group names associated with genome file names.", default=False)
    plotting.add_argument("-agg", "--aggregate", help="Aggregate metadata names by group. Options = ON or OFF. Default = OFF", default='OFF')
    plotting.add_argument("-order","--ordering",help="Control custom ordering of rows in heatmap. Options = ON or OFF. By default is OFF and lists groups or genome names in alphanumerical order.", default='OFF')
    plotting.add_argument("-list", "--order_list", help="TXT file of ordered groups in custom order instead of default alphanumerical ordering.", default=False)
    plotting.add_argument("-heatmap","--heatmap", help="Summary heatmap in PDF format. If you provide a custom name, it must end in .pdf.", default="custom-search.pdf")
    plotting.add_argument("-plot","--plotting", help="Option to turn plotting off and use raw outputs for custom visualization. Options = ON or OFF. By default is ON.", default='ON')
    other.add_argument("-p", "--threads", help="Number of threads used to perform searches. Default=2", default=2)

    # each set of arguments connects to the controller script to send to the workflow script

    args = None
    if (len(sys.argv) == 1 or sys.argv[1] == '-h' or sys.argv[1] == '--help'):
        printHelp()
        sys.exit(1)
    else:
        args = parser.parse_args()
